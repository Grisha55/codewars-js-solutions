/**
 * @function permutations
 * @param {string} string
 * @returns {string []}
*/

function permutations(string) {
  // Преобразуем строку в массив символов для удобства перестановок
  const arr = string.split('');
  
  // Используем Set для хранения результатов, чтобы автоматически убирать дубликаты
  const result = new Set();
  
  // Рекурсивная функция для генерации перестановок
  function generate(n, arr) {
    // Базовый случай рекурсии: когда остался 1 элемент, добавляем текущую комбинацию в результат
    if (n === 1) {
      result.add(arr.join('')); // join('') собирает массив обратно в строку
      return;
    }
    
    // Главный цикл алгоритма: для каждого элемента в текущем подмассиве
    for (let i = 0; i < n; i++) {
      // Рекурсивно генерируем перестановки для подмассива без текущего элемента
      generate(n - 1, arr);
      
      // Это часть алгоритма Хипа (Heap's algorithm):
      // Если n четное - меняем местами i-й и последний элементы
      // Если n нечетное - меняем местами первый и последний элементы
      if (n % 2 === 0) {
        [arr[i], arr[n - 1]] = [arr[n - 1], arr[i]]; // Современный синтаксис обмена значений
      } else {
        [arr[0], arr[n - 1]] = [arr[n - 1], arr[0]];
      }
    }
  }
  
  // Запускаем генерацию перестановок для всего массива
  generate(arr.length, arr);
  
  // Преобразуем Set в массив и возвращаем результат
  return Array.from(result);
}

/*
Как работает алгоритм Хипа (Heap's algorithm):
1. Рекурсивный подход: Функция generate вызывает саму себя, каждый раз уменьшая размер задачи.
2. Базовый случай: Когда размер подмассива (n) становится равным 1, текущая перестановка готова.
3. Перестановка элементов:
  - Для четных n: меняем местами текущий элемент (i) с последним
  - Для нечетных n: меняем местами первый элемент с последним
4. Автоматическое удаление дубликатов: Благодаря использованию Set, одинаковые перестановки не сохраняются повторно.


Пример работы для строки "abc":
1. Начинаем с ['a', 'b', 'c']
2. Первая рекурсия генерирует перестановки для ['a', 'b'] (n=2)
3. Когда n=1, добавляем текущую перестановку в результат
4. После каждого шага меняем элементы местами согласно правилам алгоритма Хипа
5. В итоге получаем все 6 перестановок: abc, acb, bac, bca, cab, cba

Для строк с повторяющимися символами (например, "aab") Set автоматически уберет дубликаты.
Этот алгоритм эффективен и элегантен, так как генерирует перестановки с минимальным количеством перестановок элементов.
*/