/**
 * @function add
 * @param {string} a
 * @param {string} b
 * @returns {string}
*/

function add(a, b) {
  let result = '';
  let carry = 0; // перенос в следующий разряд (0 или 1)
  
  // Индексы i и j начинаются с конца строк
  let i = a.length - 1;
  let j = b.length - 1;
  
  // Цикл сложения: Цикл продолжается, пока есть цифры в любом числе или остался перенос
  while (i >= 0 || j >= 0 || carry > 0) {
    
    // Берем по одной цифре из каждого числа (или 0, если число короче)
    const digitA = i >= 0 ? parseInt(a[i--]) : 0;
    const digitB = j >= 0 ? parseInt(b[j--]) : 0;
    
    // Складываем цифры и перенос из предыдущего разряда
    const sum = digitA + digitB + carry;
    
    // Записываем младший разряд суммы в результат
    result = (sum % 10) + result;
    
    // Сохраняем старший разряд суммы как перенос
    carry = Math.floor(sum / 10);
  }
  
  return result;
}

/*
Особенности решения:
  - Работает с числами любой длины (даже больше чем Number.MAX_SAFE_INTEGER)
  - Корректно обрабатывает переносы между разрядами
  - Эффективно использует строковые операции
  - Сохраняет ведущие нули (если они есть во входных данных)
*/